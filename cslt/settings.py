"""
Django settings for cslt project.

Generated by 'django-admin startproject' using Django 2.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
from cslt import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.DEBUG

if not DEBUG:
  CSRF_USE_SESSIONS = True
  CSRF_COOKIE_SECURE = True
  SESSION_COOKIE_SECURE = True

ALLOWED_HOSTS = ['*']

INSTALLED_APPS = [
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',
  'rest_framework',
  'storages',
  'cslt'
]

MIDDLEWARE = [
  'django.middleware.security.SecurityMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.middleware.locale.LocaleMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
  'csp.middleware.CSPMiddleware',
  'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cslt.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [os.path.join(BASE_DIR, 'cslt/templates')],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

WSGI_APPLICATION = 'cslt.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.mysql',
    'NAME': config.MYSQL_DBNAME,
    'USER': config.MYSQL_USER,
    'PASSWORD': config.MYSQL_PWD,
    'HOST': config.MYSQL_HOST,
    'PORT': 3306
  }
}

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-cn'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = config.STATIC_URL
STATIC_ROOT = './static'
# Rest Framework

REST_FRAMEWORK = {
  'DEFAULT_PERMISSION_CLASSES': (
    'rest_framework.permissions.IsAuthenticated',
  ),
  'DEFAULT_AUTHENTICATION_CLASSES': (
    'rest_framework_simplejwt.authentication.JWTAuthentication',
    'rest_framework.authentication.SessionAuthentication',
  ),
  'DEFAULT_RENDERER_CLASSES': (
    'rest_framework.renderers.JSONRenderer',
    'rest_framework.renderers.BrowsableAPIRenderer',
  )
}

SIMPLE_JWT = {
  'ACCESS_TOKEN_LIFETIME': config.SIMPLE_JWT_ACCESS_TOKEN_LIFETIME,
  'REFRESH_TOKEN_LIFETIME': config.SIMPLE_JWT_REFRESH_TOKEN_LIFETIME,
  'ROTATE_REFRESH_TOKENS': False,
  'BLACKLIST_AFTER_ROTATION': True,

  'ALGORITHM': 'HS256',
  'SIGNING_KEY': SECRET_KEY,
  'VERIFYING_KEY': None,

  'AUTH_HEADER_TYPES': ('Bearer',),
  'USER_ID_FIELD': 'id',
  'USER_ID_CLAIM': 'user_id',

  'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
  'TOKEN_TYPE_CLAIM': 'token_type',

  'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
  'SLIDING_TOKEN_LIFETIME': config.SIMPLE_JWT_SLIDING_TOKEN_LIFETIME,
  'SLIDING_TOKEN_REFRESH_LIFETIME': config.SIMPLE_JWT_SLIDING_TOKEN_REFRESH_LIFETIME,
}

MEDIA_ROOT = config.MEDIA_ROOT
MEDIA_URL = config.MEDIA_URL

DEFAULT_TARGET_TRAINING_VIDEO_COUNT_PER_GLOSS = config.TARGET_TRAINING_VIDEO_COUNT_PER_GLOSS
PENDING_APPROVAL_VIDEO_LIMIT_PER_USER = config.PENDING_APPROVAL_VIDEO_LIMIT_PER_USER
# Update video status when the count of reviewers is more than MINIMUM_TURNOUT
REVIEW_MINIMUM_TURNOUT = config.REVIEW_MINIMUM_TURNOUT
MIN_REJECTION_COUNT_TO_REJECTED_STATUS = int(round(REVIEW_MINIMUM_TURNOUT * 0.2)) + 1
MIN_APPROVAL_COUNT_TO_APPROVAL_STATUS = REVIEW_MINIMUM_TURNOUT - MIN_REJECTION_COUNT_TO_REJECTED_STATUS + 1

PAGE_SIZE = 10

LANGUAGES = (
  ('zh-hans', '中文简体'),
)

LOCALE_PATHS = (
  os.path.join(BASE_DIR, 'locale'),
)

if config.ENV.__name__ == 'envs.gae':
  from google.oauth2 import service_account
  SERVICE_ACCOUNT_FILE = os.path.join(BASE_DIR, 'resource',
                                      'service_account.json')
  DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
  GS_BUCKET_NAME = 'cslt-211408.appspot.com'
  GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE)
  GS_LOCATION = MEDIA_URL
  MEDIA_URL = 'https://{}.storage.googleapis.com/media/'.format(GS_BUCKET_NAME)

LOGGING = config.LOGGING
